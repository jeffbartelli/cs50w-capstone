first I borrowed the register and login content from a previous CS50 project, simply so that I could have that functionality in my site.
next I constructed my models based on the necessary data I would need to gather.
next I worked on connecting jquery so that I could work with that rather than vanilla javascript. I also connected bootstrap.
Then I had to figure out how to connect to my css and javascript docs. This was a challenge since we had not covered this in class. I used countless web resources to figure out how to modify the core docs of the django project in order to connect these documents. Previously I had entered all of my javascript into my layout.html file, but I didn't want to keep doing that.
Once those were connected I did some wireframes of how I wanted to structure my page. From there I started building out the html and css (largely based on bootstrap)
I am almost exclusively using jquery for event detection. As I build out the site I am developing event functions to offer the functionality I want. However, the structure of my page has already gotten complex, and it's slow going to grab and use the jquery selectors I want to use. This aspect of design is something I need to improve in my projects.
The first on click event I develop is to create an accordion like capability for the instructions at the top of the page. My intent is to have them appear expanded the first time somebody visits the site, and then to always appear collapsed otherwise.
next I built out the 'create category' functionality. The idea here being that a user can designate multiple categories that will contain items. I wanted them to name a new category (while preventing duplicate names). On pressing 'create' a new category card will appear. From there the user can create new items to fill the category with. 
As new categories and items are created, the records will be sent to the db, a new node will be inserted into the page, and the dashboard values will update.
I have been working for way too long on creating the new item interface. I have found how to retrieve the user values, send them to the db, create a new table row, and update the dashboard. The biggest challenges here are grabbing the right nodes to manipulate.
I have successfully created the object to send to the db. I have also successfully built capabilities to update the dashboard table.
Ran into a problem with the structure of my event listener assignments, but I found the fix (needed to get rid of a forEach operation)
I've added event listeners to the item delete buttons, so there is now a hover effect and a confirm dialogue that I will fill out later.
I added event listeners for deleting entire categories
Next I will update the total pack weight and items
The dashboard tables are fully functional.
I've fixed the new item dialogue to only be active if all fields are populated
I restructured the dashboard for ease of change.
Now I've created dummy data to allow for autopopulating on load.
The page autopopulates on load. It was fairly simple to set up, with minimal work in the python index function. But now my pre-existing scripts are generating very strange results. When I create a new category, it produces two cards, then 4, then 8, then 16! But this was easily fixed by using the jquery .hasClass() method to replace a troublesome for loop.
I've now got the python queries all set up to populate the page with existing data and to fully update the dashboard.
Now I need to attached events to the content generated on load. And then I can install the APIs. Then, I'm done?
I went through the process of attaching event listeners to everything, as well as replacing the item delete icon with a button group that has an update and delete button. The plan being that when update is clicked, the fields will become active for edits and the button names will change to save and cancel.
I've built db connections for updating target weight and how it works collapse.


Next up:
1. DONE - finish the dashboard operations
2. DONE - fix the create item div so that the create button is only active once all fields are populated
3. DONE - event handlers for deleting categories
4. DONE - inputs for include exclude of categories
5. DONE - event handlers for include exclude of items
6. DONE - event handlers for include exclude of categories
7. DONE - set up page to auto populate categories and items from the database
8. DONE - ensure necessary event listeners are attached to all...
9. Items: 
    a. on exclude all text goes gray
    b. DONE - all inputs disabled
    c. DONE - add an update button in a column before delete
    d. on 'update' click, activate inputs and replace button with submit/cancel button group
    e. on submit, change record (PUT) [line 201]
10. database connections for all
activate all event listeners (may have to do through template loops applying script blocks in html)
    a. DONE - target weight update
    b. category deletes
    c. item deletes
    d. include/exclude updates
    e. DONE - create new item button activation for preloaded categories
    f. send new item to db, (updates with js to avoid page reloads)
    g. item updates with button functionalities
11. DONE - checkbox in how it works to have it load collapsed